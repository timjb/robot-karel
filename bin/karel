#!/usr/bin/env node

process.env.NODE_DISABLE_COLORS = true // if you remove this line, repl will overwrite repl.writer

var colors = require('colors')
,   fs     = require('fs')
,   cli    = require('cli')
,   repl   = require('repl')

var World    = require('../lib/models/world').World
,   Position = require('../lib/models/position_and_direction').Position
,   sandbox  = require('../lib/helpers/sandbox')


cli.enable('version')

cli.parse({
  width:     ['w', 'Width of the world.', 'number', 9],
  depth:     ['d', 'Depth of the world.', 'number', 7],
  positionx: ['x', 'Initial x-position of the robot', 'number', 0],
  positiony: ['y', 'Initial y-position of the robot', 'number', 0],
  kdw:       [false, 'Read world from kdw file', 'path', false]
})

cli.main(function(args, opts) {
  if (opts.kdw) {
    var world = World.fromString(fs.readFileSync(opts.kdw, 'utf-8'))
  } else {
    var world = new World({
      width: opts.width,
      depth: opts.depth,
      robotOptions: {
        position: new Position(opts.positionx, opts.positiony)
      }
    })
  }
  var robot = world.getRobot()
  
  if (args.length >= 1) {
    try {
      sandbox.run(fs.readFileSync(args[0], 'utf-8'), { karel: robot })
    } catch (exc) {
      console.log(worldToAscii(world))
      throw exc
    }
    console.log(worldToAscii(world))
  } else {
    (function() {
      var oldWriter = repl.writer
      repl.writer = function(obj, showHidden, depth) {
        if (obj == karel) return worldToAscii(world)
        else              return oldWriter(obj, showHidden, depth)
      }
      
      console.log(worldToAscii(world))
      global.karel = robot
      repl.start()
    })()
  }
})


function worldToAscii(world) {
  var s = ''
  
  function repeat(n, char) {
    var result = ''
    while (n) {
      result += char
      n--
    }
    return result
  }
  
  var width = world.get('width')
  ,   depth = world.get('depth')
  ,   robotPosition = world.getRobot().get('position')
  ,   robotDirection = world.getRobot().get('direction')
  
  s += ('\u250f' + repeat(width, '\u2501') + '\u2513' + '\n')
  for (var y = 0; y < depth; y++) {
    s += '\u2503'
    for (var x = 0; x < width; x++) {
      var position = new Position(x, y)
      ,   field    = world.getField(position)
      var char
      if (robotPosition.equals(position)) {
        if      (robotDirection.isNorth()) char = '\u25b2'
        else if (robotDirection.isSouth()) char = '\u25bc'
        else if (robotDirection.isWest())  char = '\u25c4'
        else    /* east */                 char = '\u25ba'
        char = char.red
      } else if (field.block) {
        char = 'B'
      } else if (field.bricks) {
        char = field.bricks.toString(16)
      } else {
        char = ' '
      }
      if (field.marker) char = char.inverse
      s += char
    }
    s += '\u2503' + '\n'
  }
  s += '\u2517' + repeat(width, '\u2501') + '\u251b'
  
  return s
}
