(function() {
  function Model() {
    THREE.Geometry.call(this);
    var self = this;
    
    function each(arr, fn) {
      for(var i = 0, l = arr.length; i < l; i++) {
        fn(arr[i], i);
      }
    }
    
    // Points
    this.vertices = [new THREE.Vertex(new THREE.Vector3(-5.708661,-5.708661,2.755906)),new THREE.Vertex(new THREE.Vector3(-2.165354,-5.708661,0.000000)),new THREE.Vertex(new THREE.Vector3(-5.708661,-5.708661,0.000000)),new THREE.Vertex(new THREE.Vector3(-2.165354,-5.708661,2.755906)),new THREE.Vertex(new THREE.Vector3(-5.708661,1.377953,0.000000)),new THREE.Vertex(new THREE.Vector3(-4.133858,1.377953,0.000000)),new THREE.Vertex(new THREE.Vector3(-2.165354,1.377953,0.000000)),new THREE.Vertex(new THREE.Vector3(-2.165354,1.377953,9.842520)),new THREE.Vertex(new THREE.Vector3(-5.708661,1.377953,9.842520)),new THREE.Vertex(new THREE.Vector3(-2.165354,-1.377953,2.755906)),new THREE.Vertex(new THREE.Vector3(-2.165354,-1.377953,9.842520)),new THREE.Vertex(new THREE.Vector3(-5.708661,-1.377953,2.755906)),new THREE.Vertex(new THREE.Vector3(-5.708661,-1.377953,9.842520)),new THREE.Vertex(new THREE.Vector3(2.165354,-5.708661,2.755906)),new THREE.Vertex(new THREE.Vector3(5.708661,-5.708661,0.000000)),new THREE.Vertex(new THREE.Vector3(2.165354,-5.708661,0.000000)),new THREE.Vertex(new THREE.Vector3(5.708661,-5.708661,2.755906)),new THREE.Vertex(new THREE.Vector3(2.165354,1.377953,0.000000)),new THREE.Vertex(new THREE.Vector3(3.740157,1.377953,0.000000)),new THREE.Vertex(new THREE.Vector3(5.708661,1.377953,0.000000)),new THREE.Vertex(new THREE.Vector3(5.708661,1.377953,9.842520)),new THREE.Vertex(new THREE.Vector3(2.165354,1.377953,9.842520)),new THREE.Vertex(new THREE.Vector3(5.708661,-1.377953,2.755906)),new THREE.Vertex(new THREE.Vector3(5.708661,-1.377953,9.842520)),new THREE.Vertex(new THREE.Vector3(2.165354,-1.377953,2.755906)),new THREE.Vertex(new THREE.Vector3(2.165354,-1.377953,9.842520)),new THREE.Vertex(new THREE.Vector3(9.448819,1.033465,20.866142)),new THREE.Vertex(new THREE.Vector3(6.496063,1.033465,12.007874)),new THREE.Vertex(new THREE.Vector3(9.448819,1.033465,12.007874)),new THREE.Vertex(new THREE.Vector3(6.496063,1.033465,20.866142)),new THREE.Vertex(new THREE.Vector3(6.496063,-2.362205,14.370079)),new THREE.Vertex(new THREE.Vector3(6.496063,-2.362205,12.007874)),new THREE.Vertex(new THREE.Vector3(6.496063,-1.230315,14.370079)),new THREE.Vertex(new THREE.Vector3(6.496063,-1.230315,20.866142)),new THREE.Vertex(new THREE.Vector3(9.448819,-1.230315,14.370079)),new THREE.Vertex(new THREE.Vector3(9.448819,-1.230315,20.866142)),new THREE.Vertex(new THREE.Vector3(9.448819,-6.938976,12.007874)),new THREE.Vertex(new THREE.Vector3(9.448819,-6.938976,14.370079)),new THREE.Vertex(new THREE.Vector3(6.496063,-6.938976,12.007874)),new THREE.Vertex(new THREE.Vector3(6.496063,-6.938976,14.370079)),new THREE.Vertex(new THREE.Vector3(-6.889764,-6.938976,12.007874)),new THREE.Vertex(new THREE.Vector3(-9.842520,1.033465,12.007874)),new THREE.Vertex(new THREE.Vector3(-9.842520,-6.938976,12.007874)),new THREE.Vertex(new THREE.Vector3(-6.889764,1.033465,12.007874)),new THREE.Vertex(new THREE.Vector3(-6.889764,-2.362205,12.007874)),new THREE.Vertex(new THREE.Vector3(-9.842520,-6.938976,14.370079)),new THREE.Vertex(new THREE.Vector3(-9.842520,-1.230315,14.370079)),new THREE.Vertex(new THREE.Vector3(-9.842520,-1.230315,20.866142)),new THREE.Vertex(new THREE.Vector3(-9.842520,1.033465,20.866142)),new THREE.Vertex(new THREE.Vector3(-6.889764,-1.230315,14.370079)),new THREE.Vertex(new THREE.Vector3(-6.889764,-1.230315,20.866142)),new THREE.Vertex(new THREE.Vector3(-6.889764,1.033465,20.866142)),new THREE.Vertex(new THREE.Vector3(-6.889764,-2.362205,14.370079)),new THREE.Vertex(new THREE.Vector3(-6.889764,-6.938976,14.370079)),new THREE.Vertex(new THREE.Vector3(6.496063,-2.362205,20.866142)),new THREE.Vertex(new THREE.Vector3(-6.889764,-2.362205,20.866142)),new THREE.Vertex(new THREE.Vector3(-1.328740,-1.230315,20.866142)),new THREE.Vertex(new THREE.Vector3(0.935039,-1.230315,20.866142)),new THREE.Vertex(new THREE.Vector3(0.935039,1.033465,20.866142)),new THREE.Vertex(new THREE.Vector3(6.496063,2.165354,20.866142)),new THREE.Vertex(new THREE.Vector3(-6.889764,2.165354,20.866142)),new THREE.Vertex(new THREE.Vector3(-1.328740,1.033465,20.866142)),new THREE.Vertex(new THREE.Vector3(6.496063,2.165354,9.842520)),new THREE.Vertex(new THREE.Vector3(-6.889764,2.165354,9.842520)),new THREE.Vertex(new THREE.Vector3(-6.889764,-2.362205,9.842520)),new THREE.Vertex(new THREE.Vector3(6.496063,-2.362205,9.842520)),new THREE.Vertex(new THREE.Vector3(0.935039,1.033465,23.622047)),new THREE.Vertex(new THREE.Vector3(0.935039,-1.230315,23.622047)),new THREE.Vertex(new THREE.Vector3(-1.328740,1.033465,23.622047)),new THREE.Vertex(new THREE.Vector3(-1.328740,-1.230315,23.622047)),new THREE.Vertex(new THREE.Vector3(4.576772,2.706693,29.527559)),new THREE.Vertex(new THREE.Vector3(-4.970472,-2.903543,29.527559)),new THREE.Vertex(new THREE.Vector3(-4.970472,2.706693,29.527559)),new THREE.Vertex(new THREE.Vector3(4.576772,-2.903543,29.527559)),new THREE.Vertex(new THREE.Vector3(4.576772,-2.903543,23.622047)),new THREE.Vertex(new THREE.Vector3(4.576772,2.706693,23.622047)),new THREE.Vertex(new THREE.Vector3(-4.970472,2.706693,23.622047)),new THREE.Vertex(new THREE.Vector3(-4.970472,-2.903543,23.622047)),new THREE.Vertex(new THREE.Vector3(-2.666708,-2.903543,26.156496)),new THREE.Vertex(new THREE.Vector3(-1.091905,-2.903543,26.156496)),new THREE.Vertex(new THREE.Vector3(-2.666708,-2.903543,27.731299)),new THREE.Vertex(new THREE.Vector3(0.698204,-2.903543,27.731299)),new THREE.Vertex(new THREE.Vector3(2.273007,-2.903543,26.156496)),new THREE.Vertex(new THREE.Vector3(2.273007,-2.903543,27.731299)),new THREE.Vertex(new THREE.Vector3(0.698204,-2.903543,26.156496)),new THREE.Vertex(new THREE.Vector3(-1.091905,-2.903543,27.731299)),new THREE.Vertex(new THREE.Vector3(-2.666708,-4.084646,27.731299)),new THREE.Vertex(new THREE.Vector3(-1.091905,-4.084646,27.731299)),new THREE.Vertex(new THREE.Vector3(-2.666708,-4.084646,26.156496)),new THREE.Vertex(new THREE.Vector3(-1.091905,-4.084646,26.156496)),new THREE.Vertex(new THREE.Vector3(0.698204,-4.084646,27.731299)),new THREE.Vertex(new THREE.Vector3(2.273007,-4.084646,27.731299)),new THREE.Vertex(new THREE.Vector3(0.698204,-4.084646,26.156496)),new THREE.Vertex(new THREE.Vector3(2.273007,-4.084646,26.156496))];
    
    var materials = [new THREE.MeshBasicMaterial({opacity:1.000000,color:0xffffff}),new THREE.MeshBasicMaterial({opacity:1.000000,color:0xff3f00})];
    
    // Faces
    each([[0,1,2,0],[1,0,3,0],[1,0,2,1],[0,1,3,1],[1,4,2,0],[4,1,5,0],[5,1,6,0],[4,1,2,1],[1,4,5,1],[1,5,6,1],[7,5,6,0],[5,7,4,0],[4,7,8,0],[5,7,6,1],[7,5,4,1],[7,4,8,1],[7,9,10,0],[9,1,3,0],[1,9,6,0],[6,9,7,0],[9,7,10,1],[1,9,3,1],[9,1,6,1],[9,6,7,1],[4,0,2,0],[0,4,11,0],[11,4,12,0],[12,4,8,0],[0,4,2,1],[4,0,11,1],[4,11,12,1],[4,12,8,1],[12,9,11,0],[9,12,10,0],[9,12,11,1],[12,9,10,1],[9,0,11,0],[0,9,3,0],[0,9,11,1],[9,0,3,1],[7,12,8,0],[12,7,10,0],[12,7,8,1],[7,12,10,1],[13,14,15,0],[14,13,16,0],[14,13,15,1],[13,14,16,1],[14,17,15,0],[17,14,18,0],[18,14,19,0],[17,14,15,1],[14,17,18,1],[14,18,19,1],[20,18,19,0],[18,20,17,0],[17,20,21,0],[18,20,19,1],[20,18,17,1],[20,17,21,1],[20,22,23,0],[22,14,16,0],[14,22,19,0],[19,22,20,0],[22,20,23,1],[14,22,16,1],[22,14,19,1],[22,19,20,1],[17,13,15,0],[13,17,24,0],[24,17,25,0],[25,17,21,0],[13,17,15,1],[17,13,24,1],[17,24,25,1],[17,25,21,1],[25,22,24,0],[22,25,23,0],[22,25,24,1],[25,22,23,1],[22,13,24,0],[13,22,16,0],[13,22,24,1],[22,13,16,1],[20,25,21,0],[25,20,23,0],[25,20,21,1],[20,25,23,1],[26,27,28,0],[27,26,29,0],[27,26,28,1],[26,27,29,1],[27,30,31,0],[30,27,32,0],[32,27,33,0],[33,27,29,0],[30,27,31,1],[27,30,32,1],[27,32,33,1],[27,33,29,1],[33,34,32,0],[34,33,35,0],[34,33,32,1],[33,34,35,1],[26,34,35,0],[34,36,37,0],[36,34,28,0],[28,34,26,0],[34,26,35,1],[36,34,37,1],[34,36,28,1],[34,28,26,1],[26,33,29,0],[33,26,35,0],[33,26,29,1],[26,33,35,1],[36,31,38,0],[31,36,27,0],[27,36,28,0],[31,36,38,1],[36,31,27,1],[36,27,28,1],[39,36,38,0],[36,39,37,0],[36,39,38,1],[39,36,37,1],[34,30,32,0],[30,34,39,0],[39,34,37,0],[30,34,32,1],[34,30,39,1],[34,39,37,1],[40,41,42,0],[41,40,43,0],[43,40,44,0],[41,40,42,1],[40,41,43,1],[40,43,44,1],[41,45,42,0],[45,41,46,0],[46,41,47,0],[47,41,48,0],[45,41,42,1],[41,45,46,1],[41,46,47,1],[41,47,48,1],[47,49,46,0],[49,47,50,0],[49,47,46,1],[47,49,50,1],[51,41,43,0],[41,51,48,0],[41,51,43,1],[51,41,48,1],[52,40,53,0],[40,52,44,0],[40,52,53,1],[52,40,44,1],[51,47,48,0],[47,51,50,0],[47,51,48,1],[51,47,50,1],[45,40,42,0],[40,45,53,0],[40,45,42,1],[45,40,53,1],[49,45,46,0],[45,49,53,0],[53,49,52,0],[45,49,46,1],[49,45,53,1],[49,53,52,1],[54,50,55,0],[50,54,56,0],[50,56,51,0],[56,54,57,0],[57,54,58,0],[51,59,60,0],[59,51,61,0],[61,51,56,0],[59,61,58,0],[59,58,54,0],[59,54,33,0],[59,33,29,0],[50,54,55,1],[54,50,56,1],[56,50,51,1],[54,56,57,1],[54,57,58,1],[59,51,60,1],[51,59,61,1],[51,61,56,1],[61,59,58,1],[58,59,54,1],[54,59,33,1],[33,59,29,1],[60,62,63,0],[62,60,59,0],[62,60,63,1],[60,62,59,1],[32,54,30,0],[54,32,33,0],[54,32,30,1],[32,54,33,1],[31,64,65,0],[64,31,44,0],[44,31,30,0],[44,30,52,0],[52,30,54,0],[52,54,55,0],[64,31,65,1],[31,64,44,1],[31,44,30,1],[30,44,52,1],[30,52,54,1],[54,52,55,1],[60,43,51,0],[43,64,44,0],[64,43,63,0],[63,43,60,0],[43,60,51,1],[64,43,44,1],[43,64,63,1],[43,63,60,1],[63,8,64,0],[8,63,62,0],[8,62,7,0],[7,62,21,0],[7,21,10,0],[21,62,20,0],[20,62,23,0],[64,12,65,0],[12,64,8,0],[65,12,10,0],[65,10,25,0],[25,10,21,0],[65,25,23,0],[65,23,62,0],[8,63,64,1],[63,8,62,1],[62,8,7,1],[62,7,21,1],[21,7,10,1],[62,21,20,1],[62,20,23,1],[12,64,65,1],[64,12,8,1],[12,65,10,1],[10,65,25,1],[10,25,21,1],[25,65,23,1],[23,65,62,1],[50,52,55,0],[52,50,49,0],[52,50,55,1],[50,52,49,1],[62,31,65,0],[31,62,27,0],[27,62,29,0],[29,62,59,0],[31,62,65,1],[62,31,27,1],[62,27,29,1],[62,29,59,1],[31,39,38,0],[39,31,30,0],[39,31,38,1],[31,39,30,1],[51,49,50,0],[49,44,52,0],[44,49,43,0],[43,49,51,0],[49,51,50,1],[44,49,52,1],[49,44,43,1],[49,43,51,1],[66,57,67,0],[57,66,58,0],[57,66,67,1],[66,57,58,1],[67,68,69,0],[68,67,66,0],[68,67,69,1],[67,68,66,1],[66,61,58,0],[61,66,68,0],[61,66,58,1],[66,61,68,1],[61,69,56,0],[69,61,68,0],[69,61,56,1],[61,69,68,1],[57,61,56,0],[61,57,58,0],[61,57,56,1],[57,61,58,1],[69,57,56,0],[57,69,67,0],[57,69,56,1],[69,57,67,1],[70,71,72,0],[71,70,73,0],[71,70,72,1],[70,71,73,1],[70,74,73,0],[74,70,75,0],[74,70,73,1],[70,74,75,1],[76,71,77,0],[71,76,72,0],[71,76,77,1],[76,71,72,1],[77,78,74,0],[78,77,71,0],[74,78,79,0],[78,71,80,0],[80,71,81,0],[74,82,73,0],[82,74,79,0],[73,82,83,0],[73,83,81,0],[73,81,71,0],[79,84,82,0],[84,79,85,0],[84,85,81,0],[81,85,80,0],[78,77,74,1],[77,78,71,1],[78,74,79,1],[71,78,80,1],[71,80,81,1],[82,74,73,1],[74,82,79,1],[82,73,83,1],[83,73,81,1],[81,73,71,1],[84,79,82,1],[79,84,85,1],[85,84,81,1],[85,81,80,1],[70,76,75,0],[76,70,72,0],[76,70,75,1],[70,76,72,1],[77,69,76,0],[69,77,74,0],[69,74,67,0],[67,74,66,0],[76,68,75,0],[68,76,69,0],[75,68,66,0],[75,66,74,0],[69,77,76,1],[77,69,74,1],[74,69,67,1],[74,67,66,1],[68,76,75,1],[76,68,69,1],[68,75,66,1],[66,75,74,1],[85,86,80,0],[86,85,87,0],[86,85,80,1],[85,86,87,1],[78,86,88,0],[86,78,80,0],[86,78,88,1],[78,86,80,1],[85,89,87,0],[89,85,79,0],[89,85,87,1],[85,89,79,1],[88,87,89,0],[87,88,86,0],[87,88,89,1],[88,87,86,1],[85,78,79,0],[78,85,80,0],[78,85,79,1],[85,78,80,1],[89,78,88,0],[78,89,79,0],[78,89,88,1],[89,78,79,1],[83,90,81,0],[90,83,91,0],[90,83,81,1],[83,90,91,1],[92,91,93,0],[91,92,90,0],[91,92,93,1],[92,91,90,1],[83,84,82,0],[84,83,81,0],[84,83,82,1],[83,84,81,1],[93,84,92,0],[84,93,82,0],[84,93,92,1],[93,84,82,1],[83,93,91,0],[93,83,82,0],[93,83,91,1],[83,93,82,1],[84,90,92,0],[90,84,81,0],[90,84,92,1],[84,90,81,1]], function(triangle) {
      self.faces.push(new THREE.Face3(
        triangle[0],
        triangle[1],
        triangle[2],
        null,
        null,
        materials[triangle[3]]
      ));
    });
    
    // UVs
    each([null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null], function(uvs) {
      self.faceUvs.push(uvs == null ? uvs : [
        new THREE.UV(uvs[0][0], uvs[0][1]),
        new THREE.UV(uvs[1][0], uvs[1][1]),
        new THREE.UV(uvs[2][0], uvs[2][1])
      ]);
    });
    
    this.computeCentroids();
    this.computeFaceNormals();
    this.computeVertexNormals();
  }
  Model.prototype = new THREE.Geometry();
  Model.prototype.constructor = Model;
  Model.bounds = {
    width:  19.291339,
    height: 9.645669,
    depth:  29.527559
  };
  
  Model.camera = {
    position:       new THREE.Vertex(new THREE.Vector3(-73.025107,-178.757821,78.815704)).position,
    targetPosition: new THREE.Vertex(new THREE.Vector3(36.010011,1.744527,5.894276)).position
  };
  
  window["simple_robot"] = Model;
  return Model;
})()
;